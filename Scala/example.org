
: val x = Array(3, 2, 5, 1, 8, -1)
: x.reduceLeft((a:Int, b:Int) => a max b)
: x.reduceLeft((a:Int, b:Int) => a.max(b))
: def sum(xs: Array[Int]):Int = if (xs.isEmpty) 0 else xs.head + sum(xs.tail)
: def sum(xs: Array[Int]) = xs.reduceLeft((a:Int, b:Int) => a + b)


* quick sort
  #+BEGIN_SRC scala
  def sort(x: Array[Int]): Array[Int] = {
    if (x.length <= 1) x
    else {
      val pivot = x(x.length/2)
      Array.concat(
        sort(x filter(pivot >)),
	x filter(pivot ==),
	sort(x filter(pivot <)))
    }
  }
  #+END_SRC
* merge sort
  #+BEGIN_SRC scala
  // currying
  def msort[T](less: (T, T) => Boolean)(xs: List[T]): List[T] = {
    def merge(xs: List[T], ys: List[T]): List[T] =
      (xs, ys) match {
        // nice pattern
        case (Nil, _) => ys
        case (_, Nil) => xs
        case (x :: xs1, y :: ys1) =>
          if (less(x, y)) x :: merge(xs1, ys)
          else y :: merge(xs, ys1)
      }
    val n = xs.length / 2
    if (n == 0) xs
    else {
      val (ys, zs) = xs splitAt n
      merge(msort(less)(ys), msort(less)(zs))
    }
  }

  msort((a: Int, b: Int) => a < b)(List(-1, -2, 0, 1, 5, -10))

  // An underscore stands for a missing argument list
  // partially applied function
  val intSort = msort((x: int, y: Int) => x < y) _
  #+END_SRC
* while
  #+BEGIN_SRC scala
  def While(p: => Boolean)(s: => Unit) {
    if(p) {s; While(p)(s)}
  }
  #+END_SRC

* square roots by Newton's method
  #+BEGIN_SRC scala
  def abs(x: Double) = if (x > 0) x else -x 

  def sqrt(x: Double) = {

    def sqrtIter(guess: Double, x: Double): Double = 
      if (isGoodEnough(guess, x)) guess
      else sqrtIter(improve(guess, x))

    def isGoodEnough(guess: Double, x: Double) = 
      // divide x to make sure precise for small number and termination
      // for large number
      abs(guess * guess - x) / x < 0.01

    def improve(guess: Double, x: Double) = 
        (guess + x / guess) / 2
   
    sqrtIter(1.0, x)
  }
  #+END_SRC

* something
  #+BEGIN_SRC scala
  (0 until 10).foldLeft(Map.empty[Int, Int]){
    case (m, k) => m + ((k, k))
  }
  #+END_SRC


: for (x <- this) (if (p(x)) l else r) += x
: list.find(_.id == id)
* Fibonacci sequence
  #+BEGIN_SRC scala
  def fibFrom(a: Int, b: Int):Stream[Int] = a #:: fibFrom(b, a + b)
  fibFrom(1, 1) take(10) toList
  #+END_SRC

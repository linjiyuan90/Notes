* actor name should be unique

* JIT
  The Java and Scala compilers convert source code into JVM bytecode
  and do very little optimization. On most modern JVMs, once the
  *program bytecode* is run, it is converted into *machine code* for the
  computer architecture on which it is being run. This is called the
  *just-in-time compilation*.


* ExecutionContext
  You can create an ExecutionContext from a Java ExecutorService, which
  means you will be able to tune the thread pool for executing your
  database calls asynchronously independently from the rest of your
  application. If you have long-running computations, having them run
  in a separate ExecutionContext
  #+BEGIN_SRC scala
  import java.util.concurrent.Executors
  import concurrent.ExecutionContext
  val executorService = Executors.newFixedThreadPool(4)
  val executionContext = ExecutionContext.fromExecutorService(executorService)
  def future[T](body: => T)(implicit execctx: ExecutionContext): Future[T]
  #+END_SRC

* Future
* for comprehension
   make sure to instantiate all your independent futures before the
   for comprehension.

* Actor
  create a new child for each request


#+INCLUDE: "Seq hierarchy.png" Seq Hierarchy

* Vector
  The default =scala.collection.IndexedSeq()= implemention
  immutable, fast random access and modification.

  It's represented as broad, shallow =trees=. Up to 32 elements can be
  represented in a single node. 32 * 32 elements can be represented with a
  single =indirection=. And so on, five hops of vector can hold 2^30
  elements. So an element selections involves up to five primitive array
  selections. A functional =update= creates between one and five nodes that each
  contain up to 32 elements or subtress. This is certainly more expensive than
  an in-place update in a mutable array, but still a lot cheaper than copying
  the whole vector.

  - distinct
    To use =distinct= with your own class, you'll need to imp
  - flatten
    : List("Hello", "world").flatten
    : Vector(Some(1), None, Some(3), None).flatten  // -> Vector(1, 3)
    An Option can be thought of as a containter that holds zero or
    one elements, flatten has a very useful effect on a sequence of
    Some and None elements. It pulls the values out of the Some
    elements to create the new list, and drop the None elements.
  - flatMap
    In situations where you run /map/ followed by /flatten/
    Use flatMap to create a *filtered* list:
    #+BEGIN_SRC scala
    list flatMap {
      case s: String => Some(s)
      case _ => None
    }
    // List[String]
    "hi" :: 1 :: "world" :: 4 :: Nil filter { _.isInstanceOf[String]}
    // List[Any] = List(hi, world)
    "hi" :: 1 :: "world" :: 4 :: Nil collect {case s: String => s}
    // List[String] = List(hi, world)
    #+END_SRC
    The difference with filter is that this will return a
    =List[String]= rather than =List[Any]=
    Or use =collect=
    
    [[http://daily-scala.blogspot.com/2010/04/filter-with-flatmap-or-collect.html][Filter with FlatMap (or collect)]]

    Options are implicitly converted to Iterables.
    : scala> List(1, 2, 3) ++ None
    : res0: List[Int] = List(1, 2, 3)
  - filter
    #+BEGIN_SRC scala
    List(1, 2, "3", "4").filter {
      case s: String => true
      case _ => false
    }
    #+END_SRC
  - collect
  - take, takeRight, takeWhile
  - drop, dropRight, dropWhile
  - reduceLeft, reduceRight, reduce
    With respect to =reduce=, "The order in which operations are
    performed on elements is unspecified and may be nondeterministic"
  - foldLeft, foldRight, fold
  - scanLeft, scanRight, scan
    Return a sequence instead of a single value.
    : Range(1, 5).scanLeft(0){_+_}
    : // Vector(0, 1, 3, 6, 10)
  - union, diff, intersect, --
    union may not lead to distinct result for colletions such as Vector

* List
  /covariant/ 

  Do not provide fast access to arbitrary indexes, but it have fast addition and
  removal of *initial* elements.

** List patterns
   #+BEGIN_SRC scala
   val List(a, b) = List(1, 2)
   // if you don't know the number beforehand, it's better to match with ::.
   // Note! This :: is in package scala, while rest.:: is in class List
   val a :: b :: rest = List(1, 2, 3, 4)
  
   def isnert(x: Int, xs: List[Int]): List[Int] = xs match {
     case List() => List()
     case y :: ys => if (x <= y) x :: xs 
                     else y :: insert(x, ys)
   }
   #+END_SRC
** api
   The default =scala.collection.LinearSeq()= implemention
   - empty[T] 
     Empty list =Nil= has type =List[Nothing]=, =Nothing= is the bottom
     type in Scala's class hierachy.
   - zipWithIndex
   - sorted
   - sortWith(_.length < _.length)
   - sortBy()
   - head & tail, init & last
   - groupBy, partition, span, splitAt
     #+BEGIN_SRC scala
     val x = List(15, 10, 5, 8, 20, 12)
     val groups = x.groupBy(_ > 10)  // Map(false -> List(10, 5, 8), true -> List(15, 20, 12))
     x.groupBy(_%10)  // Map(5->List(15, 5), ...)
     x.partition(_ > 10)  // (List(15, 20, 12),List(10, 5, 8))
     x.span(_ < 20)  // (List(15, 10, 5, 8),List(20, 12))
     val (a, b) = x.splitAt(2)  // (List(15, 10), List(5, 8, 20, 12))
     #+END_SRC
   - grouped, sliding
     : List(1, 2, 3).grouped(2) // a iterator: List(1, 2), List(3)
   - zip, unzip, zipAll
     #+BEGIN_SRC scala
     List(1, 2, 3).zip(List("one", "two"))
     // List((1, "one"), (2, "two"))
     val couples = List(("Kim", "Al"), ("Julia", "Terry"))
     val (women, men) = couples.unzip
     // List(Kim, Julia), List(Al, Terry)

     // With zipAll, the shorter sequence is extended to match the longer one
     List(1, 2, 3).zipAll(List("a", "b"), -1, "?")
     // List(List(1, "a"), List(2, "b"), List(3, "?"))
     #+END_SRC
   - fill(num)(val)
     fill(x, y)(val)
   - range(from, until, step)
   - tabulate[A](n: Int)(f: (Int) => A): List[A] 
     Produces a list containing values of a given function over a range of integer values starting from 0
     : List.tabulate(5)(x => x * x)
     tabulate[A](n1: Int, n2: Int)(f: (Int, Int) => A): List[List[A]]
   - iterator
   - forall, exists
   - folding list /:, :\
     + xs.foldLeft(z)(op), (z /: xs)(op)
       (z /: List(a, b, c))(op) <=> op(op(op(z, a), b), c)
     + xs.foldRight(z)(op), (xs :\ z)(op)
       (List(a, b, c) :\ z)(op) <=> op(a, op(b, op(c, z)))

** note
   - Unlike arrays, =length= is a relatively expensive operation, it needs to traverse the whole list!
   - =isEmpty= is implemented as =lengthCompare(0)==0=, nice!
   - organize your data so that most accesses are at the =head= of a list, rather than the =last= element
   - list concatenation takes time proportional to the number of elements
* Seq
  Though there is a =:+= operator, no =:-= operator in Seq, use =diff=
  - 
  - indexOfSlice
  - :+, +:, padTo

* ArrayBuffer
  "Append, update, and random access take constant time(amortized
  time). Prepends and removes are linear in the buffer size."
  - ArrayBuffer.range(from, to)
  - append(elem: A*)
  - appendAll(xs: TraversableOnce[A])
  - insert(n: Int, elem: A*)
  - insertAll(n: Int, seq: collection.Traversable[A])
  - prepend, prependAll
  - remove(k)
  - trimStart(n), trimEnd(n)
* ListBuffer
  Like an ArrayBuffer except that it uses a linked list internally
  instead of an array.
  
  *Constant time append and prepend*.
  #+BEGIN_SRC scala
  val a = collection.mutable.ListBuffer[Int]()
  a += 2
  1 +=: a
  // a: (1, 2)
  #+END_SRC

* ArrayBuilder
* Array
  It's implemented as native java array(this also lead to some problem like
  genericity) but with two implicit conversions:
  - ArrayOps, defined in =Predef=
  - WrappedArray, defined in =LowPriorityImplicits=
** manifest, context bound, 
   type erasure
   ï¿¼
* Set & Map
  By default, Scala use =HashSet=, =HashMap= for Set/Map factory method. The
  sorted Set/Map is =TreeSet=, =TreeMap=.
  #+BEGIN_SRC scala
  object Predef {
    type Map[A, +B] = collection.immutable.Map[A, B]
    type Set[A] = collection.immutable.Set[A]
    val Map = collection.immutable.Map  // companion object
    val Set = collection.immutable.Set
  }
  #+END_SRC
  For sets with fewer than five elements, a special class devoted exclusively to
  sets of each particular size is used, to maximize performance. For small maps
  and sets, the immutable versions are much more *compact* than the mutable ones.
  
  - keySet, keys(Iteratable), values
  - +, ++, -, --
* Enumeration
  #+BEGIN_SRC scala
  object Margin extends Enumeration {
    type Margin = Value
    val TOP, BOTTOM, LEFT, RIGHT = Value
  }
  import Margin._
  Margin.withName("TOP") == TOP

  // a much "heavier" approach
  trait Margin
  case Object TOP extends Margin
  case Object RIGHT extends Margin
  case Object BOTTOM extends Margin
  case Object LEFT extends Margin
  #+END_SRC
* tuple
  : val (x, _, z) = t  // skip the element don't want
* Regex
** match
   You can extract match groups via pattern matching.
   #+BEGIN_SRC scala
   val line = "myprefix:123x"
   val r = """^myprefix:(.*)x""".r
   line match {
     case r(group) => group
     case _ => ""
   }
   // or
   val r(group) = line
   // but will not work for " myprefix:123x" or "myprefix:123"
   // since match is exact match
   #+END_SRC
** find
   http://www.scala-lang.org/api/current/index.html#scala.util.matching.Regex
   http://daily-scala.blogspot.com/2010/01/regular-expression-3-regex-matching.html
* String
  : text.sliding(k)  // ngram
  
* Ordering & Ordered trait
* Option
  Options are implicitly converted to Iterables, so Options can be appended to
  collections.
  #+BEGIN_SRC scala
  List(1, 2, 3) ++ Some(4)
  List(1, 2, 3) ++ None
  val x: Iterable[Int] = None
  #+END_SRC
* BitSet
  Internally, bit sets use an array of 64-bit =Longs=.
  : collection.immutable.BitSet.empty + 3 + 4 + 4
* sth
** loop over
   : for ((elem, count) <- fruits.zipWithIndex) {..}
   : for ((elem, count) <- fruits.zip(Stream from 0)) {...}
** view
   lazy view, so the elements won't be created until they're needed.
   Good for suituation when million of elements are needed.
   /Transformed method/ will be affected, like /map/, but /foreach/
   is not.
   : Range(1, 20).view.map{x=>2*x}.force
   - update
     Changing the elements in the array updates the view, and changing
     the elements referenced by the view changes the elements in the
     array. When you need to modify a subset of elements in a
     collection, creating a view on the original collection and
     modifying the elements in the view can be a powerful way to
     achieve this goal.
** Range
   : (1 until 10).toArray
   : 1 to 10 by 2 toList
   : (1 to 10).by(2).toList
   : Range(1, 10)  // 1 until 10
** mkString
   : a.mkString("[", ", ", "]")  // with prefix, and suffix


* intro
  redis in action

* features
  - in-memory key-structured database
  - data structures
    - String, List, Set, Hzsh, Sorted Set(Zset)
    mongo is more complicated
  - Server-side scripting
  - Persistence via snapshot or append-only file
  - Replication
  - HA, automated failover via 'Redis sentinel' daemon
    
* datastructure
** Strings
   - Scalars: char[], long int, double
** Lists
   implemented with linked-list
   - Doubly-linked list of char[]
   - index can be -1 for the last index
   - block pop
** Sets
** Hashes
   - Hash of char[] key -> scalars
** Sorted Sets(Zsets)
   - Hash/skiplist of char[] member -> double score
   - Order by score

* sth
  - Publish/Subscribe
  - Optimistic locking/transactions
    + WATCH(UNWATCH) - MULTI(DISCARD) - EXEC
  - Server-side scripting
    + EVAL - EVALSHA -SCRIPT LOAD
  - Client-side sharding
    - Server-side notification of "wrong shared" with cluster

* question
  - support text search?
* pulbish/subscribe
** drawbacks
   client must be connected at all times to receive messages, disconnections can
   cause the client to lose messages, and older versions of Redis could become
   unusable, crash, or be killed if there was a slow subscriber.

* others
  - redius is *single-thread* Its simpler than that, Redis like Nginx and node.js
    is an *async io evented* server where each operation is atomic simply because
    its only run one at a time. It *achieves concurrency by being very fast* and
    its fast because it runs in memory and *no time is wasted context switching
    between threads*.
  - redius don't let you query on object's values
  - any binary sequence can be a key, from string to JPEG file, even empty string.
  - a value can't be bigger than 512 MB.

* databases
  In redis, databases are simply *identified by a number* with the default
  database beging number 0.
  : 127.0.0.1:6379> select 1
  : # Then become
  : 127.0.0.1:6379[1]> 

* replication
  Redis support master/slave (not master/master) replication.
  Can slave servers write?
** slave
   Instead of specifying in conf file or by passing as argument, we can change a
   running instance's maseter by
   : redis-cli
   : > SLAVEOF master_ip master_port
* transcatoin & pipeline
  Traditional db like relation use lock to implement transaction, which may
  result in long wait times. This could be viewed as /pessimistic/. Instead,
  Redis doesn't lock data during =WATCH=, which it's called /optimistic
  locking/.
  
** MULTI/EXEC
   =MULTI= + series of commands + =EXEC=
   
   This *delayed* execution method of sending multiple commands at once and
   waiting for all of the replies is generally referred to as /pipeling/.
** WATCH
   When we've watched keys with =WATCH=, if at any time some other client
   replaces, updates, or deletes any keys that we've WATCHed before we have
   performed the =EXEC= operation, our operatons against Redis will fail with an
   error messsage when we try to =EXEC=.

   By using WATCH, MULTI/EXEC, and UNWATCH/DISCARD, we can ensure that the data
   that we're working with doesn't change while we're doing something important,
   which protects us from *data corruption*. (Consitent?)

   =WATCH= + fetch data + =MULTI= + commands + =EXEC=
   =WATCH= + fetch data + =UNWATCH=
** pipeline
   The =MULTI/EXEC= pipeline has a "trasaction" property. Besides, there is
   something called /non-transactional pipelines/.  Just pass =False= to the
   pipeline constructor, and it won't use =MULTI/EXEC=. This fits situation when
   result of one command doesn't affect the input to another.

* application
  - distributed id generator
    since Redis is single thread, just use =incr=, cool.
* sth
  - getSet can be used as a lock?

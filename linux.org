
* users
  - chown
    chown -R user:group dir
  - adduser
    
  - sudo -u user cmd
  - change root's password
    : sudo passwd root

* development
** ldap
** /etc/ld.so.conf
* ld
  - /etc/ld.so.conf
  - ldconfig
    since stale ld.so.cache, run ldconfig to update it.
** ldd
** elf
   Executable and Linkable Format
   if ldd doesn't work, use readelf.
   : readelf -d executable | grep NEEDED

* ssh
  add your public key to target user's ~/.ssh/authorized_keys,
  then you can ssh the target user without authorization, or
  : ssh-copy-id -i ~/.ssh/id_rsa.pub usr@host
  what if the target user change its password?
  |                       |   |
  |-----------------------+---|
  | ssh user@host -t 'ls' |   |
  |                       |   |
  |                       |   |
  |                       |   |
** execute remote command
   : ssh root@MachineB 'bash -s' < local_script.sh
   : ssh user@host <<'ENDSSH'
   : #commands to run on remote host
   : ENDSSH
   : ssh -t -C remote "command here"
** tunnel
   want to scp file from localhost to remote2 but it can only be
   accessed from remote1
   #+BEGIN_SRC shell
   # First, open the tunnel
   ssh -L 1234:remote2:22 -p 45678 user1@remote1
   # Then, use the tunnel to copy the file directly from remote2
   scp -P 1234 user2@localhost:file .
   #+END_SRC
* sort
  Even with field-separator, sort compares strings with
  field-seperator. By default, it compares from field1 to end of line.
  : $ echo -e "abc ;def\nabc;def" | sort -k1 -t ','
  : abc ,def
  : abc,def
  : # it will compare the whole string!
  : $ echo -e "abc ;def\nabc;def" | sort -k1,1 -t ','
  : abc,def
  : abc ,def
  : # only compare 'abc', 'abc '

* grep
  : echo -e '123\n\d+' | grep -P '\d+'
  '\d' is not in grep's regrex, add -P to use perl regex. or use
  : [[:digit:]]
  
* owner
  - change owner of link instead of file it refers to, add -h option
    : chown -h owner:group link
* intersection between two files
  : sort a.txt b.txt | uniq -d  # make sure a.txt, b.txt don't have duplicate lines
  : grep -f a.txt b.txt  # slower than the above one
* ansi escape code
  http://en.wikipedia.org/wiki/ANSI_escape_code
  : console.log('\033[90m' + 'red' + '\033[39m' + 'default');

  : System.out.pritnln("first line");
  : System.out.print(\33[1A\33[2K");  // this will erase the prev line
  : System.out.pritnln("next line");
* FAQ
** GPG Error on Update
#+BEGIN_EXAMPLE
sudo apt-get clean
cd /var/lib/apt
sudo mv lists lists.old
sudo mkdir -p lists/partial
sudo apt-get clean
sudo apt-get update
#+END_EXAMPLE

* mount
  how to mount a remote direcotry?

* output
  
* jobs
  - to resume a background in other terminal(for example, in screen), use
    : kill -CONT <pid>
    Since =jobs -l= will show nothing, you can't use =fg=
* ulimit
  | options | desc                                   |
  |---------+----------------------------------------|
  | -a      | show all                               |
  | -f      | max file size created by a process, KB |
  | -m      | max memory, KB                         |
  | -n      | max opened file                        |
  | -p      | max pipes buffer, KB                   |
  | -s      | max stack size, KB                     |
  | -t      | max CPU time, second                   |
  | -u      | max number of process                  |
  | -v      | virtual memory                         |
  set to =unlimited=.

* programming
** trick
   - when programming with remote db, with logic read one process one, notice the timeout in cursor.
     read all at one time? or branch read, or set timeout?
     
* shell
  : cat /etc/shells
  It seems that =zsh= is the most powerful shell.
  : chsh -s /bin/zsh
* route
  : route [add|del] -net 10.0.0.0/8 gw 10.61.1.254
  Note, if you want to ping from A to B, need to make sure *both* end have route!


* basic
** somethings
   - only push/poll need network access
   - snapshots, not patches
** operations
   - git branch
     only shows local branch
     git branch -r show remote
   - git add
     add the *content/version* of this file to my next commit
     if you modify the file after add, before you commit, you need to
     add again!
     
     if you have git add a file, delete this file and then commit,
     the file will still there!

     *checksum*
   - git commit
     git commit -a automatically add everything you have modified
     (tracked files)

   - git diff
     difference between current working directory and staged/last
     commit state.

   - git checkout bc
     only give the point's indexed file back, may overwritten current
     same file, but it'll prompt.

   - git merge branch_name
     I think merge should be operated in local branch. If you
     checkout to a remote branch then merge, it'll be in "no branch".

     -ff-only
     
   - git show-branch
   - git push
     By default, with specifying branch, git push will push *all* the
     branches you have push before unless you specify the branch you
     want to.

     *The first time* you want to push a branch, you need to specify
     its name.
    If a branch has not been pushed before, it won't automatically
     push next if you push. (So you can save you private branch
     local, without pushing it to remote)

     If the branch you push has been modified in the remote
     repository, git will requrie to pull first.

   - get fetch
     will fetch down new changes by others and move the origin/master
     to new state.
     And now you update, and push, origin/master will change to your
     new state.
     In other words, origin/master will always synchronize with the
     remote state!
     
     what's the difference between pull/fetch?
     fetch will get all the branch including the one you don't need,
     and there may be a looooooooooooot of branches. If you have to
     merge one by one, this will make you crazy! 
     pull = fetch + merge

   - git log
     shows HEAD's log, not other branch.
     git log --oneline [starting-point]
     git log --all --oneline --graph --decorate
     *logset*
     git log A ^B
       show all A can reach, but B can't
       this will show what the branch means!
     git log master ^origin/master
       what you have not push to origin yet.

   - git config
     git config --global alias.lol "log --oneline --graph --decorate"
     
* Note
  if two branch are point to same state, it's very dangerous, because
  changing the working directory in one branch will affect the other
  branch!


There is a local repo and a lot of remote repos.
If you want to use local branch to push to a remoe repo/branch, you
have to fetch/pull first.
fetch only synchronize your local's remote repos.
pull will merge your local branch as well. (it'll create new remote
branch as well if there is. This new remote branch will not merge to
your local branch since there is no local branch tracking this new branch!)



what's HEAD and ref?
checkout is moving HEAD to the point.

what's upstream?


what's a stage?
commit -a will track all the files that have been staged in previous
commit.
git rm --cached to rm it from stage (not rm CWD file)
git rm will rm both.


git add
  is add current file's content to index, for next commit
git commit
  will commit all its index, not only the one new added, but the one
  not added will commit its old content (index)
  -a will update index file's content to current content, and commit


does the index share by all branchs/commits?
will modify one affect others' index?
At some point, git rm (or with --cached) only rm current point's
index. Won't affect others!


*commit before you checkout to other point*, otherwise the change you
make will take effect like new file, delete file, but modify will
prompt overwrite.


** [[http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files][gitignore]]
   A class of file that you don't want Git to automatically *add* or
   even show you as being *untracked*.
   - .gitignore
     : $ cat .gitignore
     : *.[oa]
     : *~
   - blank lines or lines starting with # are ignored
   - standard glob patterns work
   - end patterns with / to specify a dir
   - negate a pattern by starting it with an exclamation point(!)
   : # a comment - this is ignored
   : # no .a files
   : *.a
   : # but do track lib.a, even though you're ignoring .a files above
   : !lib.a
   : # only ignore the root TODO file, not subdir/TODO
   : /TODO
   : # ignore all files in the build/ directory
   : build/
   : # ignore doc/notes.txt, but not doc/server/arch.txt
   : doc/*.txt
   : # ignore all .txt files in the doc/ directory
   : doc/**/*.txt




* remote
  after add ssh key to github,
  : ssh -T git@github.com  # test
  : git remote set-url origin git@github.com:username/repo.git  # use ssh rather https

* others
  : git pull --rebase origin master  # what's this?
* [[http://magit.github.io/magit/magit.html][magit]]
  - only implements the most common Git operations
  - M-x magit-status to entry
    by default, this will use the current directory's git repository,
    if there is not, magit will asks to create a new repository.
    - C-u M-x magit-status
      Choose other git dir, switch between them.
    - *g* to refresh if you've modify files
  - *magit-process* buffer contains the transcript of the most recent
    command, you can swith to it wit $.

** sections
   section is something like *Staged changes*, *Changes*, *Untracked files*
   - 1, 2, 3, 4 to control the visibility of sections based on levels
   - M-1, 2, 3, 4 will control all sections' visibility
   - TAB, S-TAB also works

*** untracked files
    |       |                                             |
    |-------+---------------------------------------------|
    | s     | add an untracked file to staging area       |
    |       | if in section, will add all untracked files |
    | C-u S | stage all untracked files                   |
    | u     | unstaged                                    |
    |-------+---------------------------------------------|
    | i     | add to .gitignore                           |
    | C-u i | prompt and add to .gitignore                |
    | I     | add to .git/info/exclude                    |
    |-------+---------------------------------------------|
    | k     | remove file                                 |
    
*** staging
    staged changes
    changes (indexed, but not staged, unstaged changes)
    untracked
    |       |                                    |
    |-------+------------------------------------|
    | s     | add changes to staged changes      |
    | u     | unstage a hunk                     |
    | C-u S | staged all untracked/tracked files |
    | C-u U | unmark all the files               |
    |-------+------------------------------------|
    | C-u s | ask a name for staged              |

*** commit  
    | c       | to pop up a buffer to write change description  |
    |---------+-------------------------------------------------|
    | C-c C-c | perform commit. If nothing staged, it will ask  |
    |         | to whether commit all unstaged changes.         |
    | C-c C-t | specify name and email for commit author        |
    | C-c C-a | whether next commit will /amend/ current commit |
    | C-c C-e | --allow-empty, without including any changes    |
    | C-c C-k | erase *magit-log-edit* buffer and bury it       |

*** history
    |-----------------+-----------------------------------|
    | q               | quit                              |
    | l l             | short history of HEAD             |
    | l L             | long history of HEAD              |
    | l h             | local history of HEAD             |
    | l rl            | range history between two points  |
    | l rL            | range, but long history           |
    | l =g            | grep                              |
    |-----------------+-----------------------------------|
    | when in history |                                   |
    |-----------------+-----------------------------------|
    | C-w             | copy the sha1                     |
    | RET/SPC         | show the commit history           |
    | v               | revert                            |
    | ..              | mark                              |
    | .               | unmark                            |
    | C-u ..          | mark every one                    |
    | \=              | show the differences from current |
    |                 | commit and marked one             |

    
















[[http://www.youtube.com/watch?v=ZDR433b0HJY][Introduction to Git with Scott Chacon of Github]] \\
[[http://daemianmack.com/magit-cheatsheet.html][magit-cheatsheet]] \\



